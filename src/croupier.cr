# Croupier describes a task graph and lets you operate on them

module Croupier
  VERSION = "0.1.0"

  # A Task is a block of code that generates an output file
  #
  # It can have one or more inputs, which may also be outputs of other tasks
  # It has a descriptive `name` which should be understandable to the user
  # It has a `block` of code which is executed when the task is run

  class Task
    # Registry of all tasks
    @@Tasks = {} of String => Task
    def self.tasks
      @@Tasks
    end

    # Registry of modified files, which will make tasks stale
    @@Modified = Set(String).new

    def initialize(name, output, inputs, &block)
      @name = name
      @block = block
      @output = output
      @inputs = inputs
      @stale = false
      if @@Tasks.has_key? output
        # Can't have two tasks generating the same output 
        raise "Task conflict: #{name} would generate #{output} which is already generated by #{@@Tasks[output].@name}"
      end
      @@Tasks[output] = self
    end

    # This should generate the output file
    def run
      @block.call
      # Since we just generated it, output is modified and Task is not stale
      @stale = false
    end

    # Tasks are stale if any of their inputs are stale 
    def stale?
      @stale = (
        @inputs.any? { |input| @@Modified.include? input } || 
        @inputs.any? { |input| @@Tasks.has_key? input && @@Tasks[input].stale? }
      )
    end
  end

  # Scan a tree of directories and return a hash with their sha1
  def self.scanTree(path)
    Dir.glob("#{path}/**/*").reduce({} of String => String) do |hash, file|
      hash[file] = Digest::SHA1.file(file).hexdigest
      hash
    end
  end
end
