crystal_doc_search_index_callback({"repository_name":"croupier","body":"# Croupier\n\nCroupier is a smart task definition and execution library.\n\n[![codecov](https://codecov.io/gh/ralsina/croupier/branch/main/graph/badge.svg?token=YW23EDL5T5)](https://codecov.io/gh/ralsina/croupier)\n[![.github/workflows/ci.yml](https://github.com/ralsina/croupier/actions/workflows/ci.yml/badge.svg)](https://github.com/ralsina/croupier/actions/workflows/ci.yml)\n\n## What does that mean?\n\nYou use Croupier to define tasks. Tasks have:\n\n* A name\n* Zero or more input files\n* One output file\n* A `Proc` that consumes the inputs and returns a string\n* After the `Proc` returns a string it's saved to the output unless\n  the task has the `no_save` flag set to `true` \n\nAnd here is the fun part:\n\nCroupier will examine the inputs and outputs for your tasks and\nuse them to build a dependency graph. This expresses the connections\nbetween your tasks and the files on disk, and between tasks, and **will \nuse that information to decide what to run**.\n\nSo, suppose you have `task1` consuming `input.txt` producing `fileA` and `task2` that has `fileA` as input and outputs `fileB`. That means your tasks look something like this:\n\n```mermaid\n  graph LR;\n      id1([\"📁 input.txt\"])-->idt1[\"⚙️ task1\"]-->id2([\"📁 fileA\"]);\n      id2-->idt2[\"⚙️ task2\"]-->id3([\"📁 fileB\"]);\n```\n\nCroupier guarantees the following:\n\n* If `task1` has never run before, it *will run* and create `fileA`\n* If `task1` has run before and `input.txt` has not changed, it *will not run*.\n* If `task1` has run before and ìnput.txt` has changed, it *will run*\n* If `task1` runs, `task2` *will run* and create `fileB`\n* `task1` will run *before* `task2`\n\nThat's a very long way to say: Croupier will run whatever needs running, based on the content of the dependency files and the dependencies between tasks. In this example it may look silly because it's simple, but it should work even for thousands of tasks and dependencies.\n\nThe state between runs is kept in `.croupier` so if you delete that file\nall tasks will run.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     croupier:\n       github: your-github-user/croupier\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nThis is the example described above, in actual code:\n\n```crystal\nrequire \"croupier\"\n\nb1 = ->{\n  puts \"task1 running\"\n  File.read(\"input.txt\").downcase\n}\n\nCroupier::Task.new(\n  name: \"task1\",\n  output: \"fileA\",\n  inputs: [\"input.txt\"],\n  proc: b1\n)\n\nb2 = ->{\n  puts \"task2 running\"\n  File.read(\"fileA\").upcase\n}\nCroupier::Task.new(\n  name: \"task2\",\n  output: \"fileB\",\n  inputs: [\"fileA\"],\n  proc: b2\n)\n\nCroupier::Task.run_tasks\n```\n\nIf we create a `index.txt` file with some text in it and run this program, it will print it's running `task1` and `task2` and produce `fileA` with that same text in upper case, and `fileB` with the text in lowercase.\n\nThe second time we run it, it will *do nothing* because all tasks dependencies are unchanged.\n\nIf we modify `index.txt` or `fileA` then one or both will tasks will run, as needed.\n\n## Development\n\nLet's try to keep test coverage good :-)\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/croupier/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Roberto Alsina](https://github.com/ralsina) - creator and maintainer\n","program":{"html_id":"croupier/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"croupier/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"},{"html_id":"croupier/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"}],"locations":[],"repository_name":"croupier","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"croupier/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"croupier/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"extended_modules":[{"html_id":"croupier/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"croupier/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"class_methods":[{"html_id":"topological_sort(g)-class-method","name":"topological_sort","abstract":false,"args":[{"name":"g","external_name":"g","restriction":""}],"args_string":"(g)","args_html":"(g)","location":{"filename":"src/topo_sort.cr","line_number":4,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/topo_sort.cr#L4"},"def":{"name":"topological_sort","args":[{"name":"g","external_name":"g","restriction":""}],"visibility":"Public","body":"seen = Set(String).new\nstack = Array(String).new\norder = Array(String).new\nq = [\"start\"]\nwhile !q.empty?\n  v = q.pop\n  if !(seen.includes?(v))\n    seen << v\n    g[v].each do |w|\n      q << w\n    end\n    while (!stack.empty?) && (!(g[stack.last].includes?(v)))\n      order << stack.pop\n    end\n    stack << v\n  end\nend\nresult = stack + order.reverse\nif result.size != g.size\n  raise(\"Cycle detected\")\nend\nresult\n"}}],"types":[{"html_id":"croupier/Croupier","path":"Croupier.html","kind":"module","full_name":"Croupier","name":"Croupier","abstract":false,"locations":[{"filename":"src/croupier.cr","line_number":8,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L8"}],"repository_name":"croupier","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"croupier/Croupier/Task","path":"Croupier/Task.html","kind":"class","full_name":"Croupier::Task","name":"Task","abstract":false,"superclass":{"html_id":"croupier/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"croupier/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"croupier/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/croupier.cr","line_number":17,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L17"}],"repository_name":"croupier","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"croupier/Croupier","kind":"module","full_name":"Croupier","name":"Croupier"},"class_methods":[{"html_id":"all_inputs-class-method","name":"all_inputs","doc":"All inputs from all tasks","summary":"<p>All inputs from all tasks</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":81,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L81"},"def":{"name":"all_inputs","visibility":"Public","body":"@@tasks.values.flat_map do |task|\n  task.@inputs\nend.uniq!"}},{"html_id":"clear_modified-class-method","name":"clear_modified","doc":"Mark all files as unmodified (only meant for testing)","summary":"<p>Mark all files as unmodified (only meant for testing)</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":69,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L69"},"def":{"name":"clear_modified","visibility":"Public","body":"@@modified.clear"}},{"html_id":"mark_modified(file)-class-method","name":"mark_modified","doc":"Mark one file as modified","summary":"<p>Mark one file as modified</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":""}],"args_string":"(file)","args_html":"(file)","location":{"filename":"src/croupier.cr","line_number":64,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L64"},"def":{"name":"mark_modified","args":[{"name":"file","external_name":"file","restriction":""}],"visibility":"Public","body":"@@modified << file"}},{"html_id":"mark_stale-class-method","name":"mark_stale","doc":"Read state of last run, then scan inputs and compare","summary":"<p>Read state of last run, then scan inputs and compare</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":86,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L86"},"def":{"name":"mark_stale","visibility":"Public","body":"if File.exists?(\".croupier\")\n  @@last_run = File.open(\".croupier\") do |file|\n    (YAML.parse(file)).as_h.map do |k, v|\n      [k.to_s, v.to_s]\n    end.to_h\n  end\nelse\n  @@last_run = {} of String => String\nend\n(@@this_run = scan_inputs).each do |file, sha1|\n  if (@@last_run.fetch(file, \"\")) != sha1\n    mark_modified(file)\n  end\nend\n"}},{"html_id":"modified-class-method","name":"modified","abstract":false,"location":{"filename":"src/croupier.cr","line_number":59,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L59"},"def":{"name":"modified","visibility":"Public","body":"@@modified"}},{"html_id":"run_tasks(run_all:Bool=false)-class-method","name":"run_tasks","doc":"Run all stale tasks in dependency order\n\nIf `run_all` is true, run non-stale tasks too","summary":"<p>Run all stale tasks in dependency order</p>","abstract":false,"args":[{"name":"run_all","default_value":"false","external_name":"run_all","restriction":"Bool"}],"args_string":"(run_all : Bool = false)","args_html":"(run_all : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/croupier.cr","line_number":114,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L114"},"def":{"name":"run_tasks","args":[{"name":"run_all","default_value":"false","external_name":"run_all","restriction":"Bool"}],"visibility":"Public","body":"mark_stale\n_, tasks = Task.sorted_task_graph\ntasks.each do |task|\n  if (@@tasks.has_key?(task)) && (run_all || @@tasks[task].stale?)\n    path = @@tasks[task].@output\n    data = @@tasks[task].run\n    if @@tasks[task].@no_save\n      if File.exists?(path)\n        data = File.read(path)\n      else\n        Log.warn do\n          \"Task #{@@tasks[task]} did not generate #{path}\"\n        end\n        next\n      end\n    else\n      Dir.mkdir_p(File.dirname(path))\n      File.open(path, \"w\") do |io|\n        io.puts(data)\n      end\n    end\n    @@next_run[path] = Digest::SHA1.hexdigest(data)\n  end\nend\nFile.open(\".croupier\", \"w\") do |file|\n  file.puts(YAML.dump(@@this_run.merge(@@next_run)))\nend\n"}},{"html_id":"scan_inputs-class-method","name":"scan_inputs","doc":"Scan all inputs and return a hash with their sha1","summary":"<p>Scan all inputs and return a hash with their sha1</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":102,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L102"},"def":{"name":"scan_inputs","visibility":"Public","body":"self.all_inputs.reduce({} of String => String) do |hash, file|\n  if File.exists?(file)\n    hash[file] = Digest::SHA1.hexdigest(File.read(file))\n  end\n  hash\nend"}},{"html_id":"sorted_task_graph-class-method","name":"sorted_task_graph","doc":"Tasks as a dependency graph sorted topologically","summary":"<p>Tasks as a dependency graph sorted topologically</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":26,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L26"},"def":{"name":"sorted_task_graph","visibility":"Public","body":"g = Crystalline::Graph::DirectedAdjacencyGraph(String, Set(String)).new\ng.add_vertex(\"start\")\nall_inputs.each do |input|\n  if !(@@tasks.has_key?(input))\n    g.add_vertex(input)\n    g.add_edge(\"start\", input)\n  end\nend\n@@tasks.each do |output, task|\n  g.add_vertex(output)\n  if (task.@inputs).empty?\n    g.add_edge(\"start\", output)\n  end\n  (task.@inputs).each do |input|\n    g.add_edge(input, output)\n  end\nend\nreturn {g, (topological_sort(g.@vertice_dict)).select do |v|\n  @@tasks.has_key?(v)\nend}\n"}},{"html_id":"tasks-class-method","name":"tasks","abstract":false,"location":{"filename":"src/croupier.cr","line_number":21,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L21"},"def":{"name":"tasks","visibility":"Public","body":"@@tasks"}}],"constructors":[{"html_id":"new(name:String,output:String,inputs:Array(String),proc:Proc(String),no_save:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"output","external_name":"output","restriction":"String"},{"name":"inputs","external_name":"inputs","restriction":"Array(String)"},{"name":"proc","external_name":"proc","restriction":"Proc(String)"},{"name":"no_save","default_value":"false","external_name":"no_save","restriction":"::Bool"}],"args_string":"(name : String, output : String, inputs : Array(String), proc : Proc(String), no_save : Bool = false)","args_html":"(name : String, output : String, inputs : Array(String), proc : Proc(String), no_save : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/croupier.cr","line_number":148,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L148"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"output","external_name":"output","restriction":"String"},{"name":"inputs","external_name":"inputs","restriction":"Array(String)"},{"name":"proc","external_name":"proc","restriction":"Proc(String)"},{"name":"no_save","default_value":"false","external_name":"no_save","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, output, inputs, proc, no_save)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"run:String-instance-method","name":"run","doc":"This should generate the output file","summary":"<p>This should generate the output file</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":166,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L166"},"def":{"name":"run","return_type":"String","visibility":"Public","body":"@proc.call"}},{"html_id":"stale?-instance-method","name":"stale?","doc":"Tasks are stale if any of their inputs are stale","summary":"<p>Tasks are stale if any of their inputs are stale</p>","abstract":false,"location":{"filename":"src/croupier.cr","line_number":171,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L171"},"def":{"name":"stale?","visibility":"Public","body":"@stale = (@inputs.any? do |input|\n  @@modified.includes?(input)\nend || @inputs.any? do |input|\n  (@@tasks.has_key?(input)) && @@tasks[input].stale?\nend)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/croupier.cr","line_number":178,"url":"https://github.com/ralsina/croupier/blob/cd3944e3e298f06645c40dc8663cf7d1716b753e/src/croupier.cr#L178"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"#{@name}::#{@output}\""}}]}]}]}})